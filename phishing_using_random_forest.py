# -*- coding: utf-8 -*-
"""phishing using Random forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ZBLqSyyPzRBJkk54GOJSkGB29OnDdG-
"""

from sklearn import tree
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

import numpy as np
import sys

def load_data():
  training_data = np.genfromtxt('dataset.csv', delimiter=',', dtype=np.int32)
  inputs = training_data[:,:-1]   # extract the input & output
  outputs = training_data[:, -1]

 # This model follow 80-20 rule on dataset & Split 80% for traning and 20% testing

  boundary = int(0.8*len(inputs))
  training_inputs, training_outputs, testing_inputs, testing_outputs = train_test_split(inputs, outputs, test_size=0.33)
  return training_inputs, training_outputs, testing_inputs, testing_outputs

def run(classifier, name):
    train_inputs, test_inputs,train_outputs, test_outputs = load_data()

    # Train the decision tree classifier
    classifier.fit(train_inputs, train_outputs)

    # Use the trained classifier to make predictions on the test data
    predictions = classifier.predict(test_inputs)

    # Print the accuracy (percentage of phishing websites correctly predicted)
    accuracy = 100.0 * accuracy_score(test_outputs, predictions)
    print ("Accuracy score using {} is: {}\n".format(name, accuracy))

print ("Best classifier for detecting phishing websites.")
      classifier = RandomForestClassifier(n_estimators=500, max_depth=20, max_leaf_nodes=10000)
      run(classifier, "Random forest")